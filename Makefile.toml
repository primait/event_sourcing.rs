[env]
DATABASE_URL = "postgresql://postgres:postgres@postgres:5432/postgres"
RABBIT_URL = "amqp://rabbit:rabbit@rabbit/rabbit"
KAFKA_BROKERS_URL = "kafka:9092"

[env.drone]
DATABASE_URL = "postgresql://postgres:postgres@postgres:5432/postgres"
RABBIT_URL = "amqp://rabbit:rabbit@rabbit/rabbit"
KAFKA_BROKERS_URL = "kafka:9092"

[config]
default_to_workspace = false

# Check
[tasks.check]
description = "Run checks for each feature"
dependencies = ["check-ci"]

[tasks.check-ci]
script = [
    "cargo check",
    "cargo check --features=postgres",
    "cargo check --features=kafka",
    "cargo check --features=rabbit",
    "cargo check --features=rebuilder",
    "cargo check --features=upcasting",
    "cargo check --all-features"
]

# Build
[tasks.build]
description = "Build the binaries for each feature"
dependencies = ["build-ci"]

[tasks.build-ci]
script = [
    "cargo build -j 2",
    "cargo build -j 2 --features=postgres",
    "cargo build -j 2 --features=kafka",
    "cargo build -j 2 --features=rabbit",
    "cargo build -j 2 --features=rebuilder",
    "cargo build -j 2 --features=upcasting",
    "cargo build -j 2 --all-features"
]

# Format
[tasks.format-ci]
description = "Runs the cargo rustfmt plugin during CI"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

# Tests
[tasks.test]
description = "Run tests"
dependencies = ["test-ci"]

[tasks.test-ci]
description = "Run tests during CI"
script = [
    "cargo test ${@}",
    "cargo test ${@} --features=postgres",
    "cargo test ${@} --features=rebuilder",
    "cargo test ${@} --features=kafka",
    "cargo test ${@} --features=rabbit",
    "cargo test ${@} --features=rebuilder",
    "cargo test ${@} --features=upcasting",
    "cargo test ${@} --all-features"
]

# Clippy
[tasks.clippy]
description = "Run clippy linter"
dependencies = ["clippy-ci", "clippy-examples"]

[tasks.clippy-ci]
description = "Run clippy linter during CI"
script = [
    "cargo clippy -- -D warnings",
    "cargo clippy --features=postgres -- -D warnings",
    "cargo clippy --features=kafka -- -D warnings",
    "cargo clippy --features=rabbit -- -D warnings",
    "cargo clippy --features=rebuilder -- -D warnings",
    "cargo clippy --features=upcasting -- -D warnings",
    "cargo clippy --all-features -- -D warnings"
]

[tasks.clippy-examples]
description = "Run clippy over all examples"
script = [
    "cargo clippy --example aggregate_deletion --features=postgres -- -D warnings",
    "cargo clippy --example event_bus --features=postgres,rabbit,kafka",
    "cargo clippy --example eventual_view --features=postgres -- -D warnings",
    "cargo clippy --example locking_strategies --features=postgres -- -D warnings",
    "cargo clippy --example multi_aggregate_rebuild --features=postgres -- -D warnings",
    "cargo clippy --example rebuilder --features=rebuilder,postgres -- -D warnings",
    "cargo clippy --example saga --features=postgres -- -D warnings",
    "cargo clippy --example shared_view --features=postgres -- -D warnings",
    "cargo clippy --example store_crud --features=postgres -- -D warnings",
    "cargo clippy --example transactional_view --features=postgres -- -D warnings",
    "cargo clippy --example upcasting --features=postgres,upcasting -- -D warnings",
]

# Run example
[tasks.examples]
description = "Run all configured examples"
script = [
    "cargo run --example aggregate_deletion --features=postgres",
    "cargo run --example event_bus --features=postgres,rabbit,kafka",
    "cargo run --example eventual_view --features=postgres",
    "cargo run --example locking_strategies --features=postgres",
    "cargo run --example multi_aggregate_rebuild --features=postgres",
    "cargo run --example rebuilder --features=rebuilder,postgres",
    "cargo run --example saga --features=postgres",
    "cargo run --example shared_view --features=postgres",
    "cargo run --example store_crud --features=postgres",
    "cargo run --example transactional_view --features=postgres",
    "cargo run --example upcasting --features=postgres,upcasting",
]


# Docs
[tasks.docsrs]
description = "Build docs as they are rendered on docs.rs"
command = "cargo"
args = ["doc", "--all-features"]

[tasks.cargo-prune]
description = "Run cargo prune"
command = "cargo"
args = ["prune"]

[tasks.print-stats]
description = "Print cache size"
command = "du"
args = ["-sh", "target", ".cargo"]

[tasks.cache-cleanup]
description = "Clean CI cache"
dependencies = ["cargo-prune", "delete-artifacts", "print-stats"]

[tasks.delete-artifacts]
description = "Remove non cachable artifacts"
script = [
    '''
    #!/bin/bash
    set -e
    set -x
    find ./target/debug -type f -maxdepth 1 -delete || true
    rm -rf ./target/{debug,release}/deps/{*prima-tracing*}
    rm -rf ./target/{debug,release}/.fingerprint/*prima-tracing*
    ''',
]
